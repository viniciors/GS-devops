trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Nome do artifact que será publicado
  artifactName: 'drop'

  # Service Connection do Azure DevOps
  azureSubscription: 'AzureConnection'

  # Resource Group e App Service
  azureResourceGroup: 'rg-demo-app'
  azureWebAppName: 'gs-app'

  # Variáveis do Azure SQL
  azureSqlServer: 'servidor-sqldb-gs-demo'
  azureSqlDatabase: 'sqldb-gs-demo'
  sqlUser: 'adm@servidor-sqldb-gs-demo'
  sqlPassword: '@Gs12345'

  # Monta a JDBC URL completa:
  CONNECTION_STRING: >-
    jdbc:sqlserver://$(azureSqlServer).database.windows.net:1433;
    database=$(azureSqlDatabase);
    user=$(sqlUser);
    password=$(sqlPassword);
    encrypt=true;
    trustServerCertificate=false;
    hostNameInCertificate=*.database.windows.net;
    loginTimeout=30;

jobs:
  - job: Build
    displayName: 'Build do projeto e publica JAR'
    steps:
      # 1) Compilar com Maven apontando diretamente para demo/pom.xml
      - task: Maven@3
        displayName: 'Compilar com Maven (demo/pom.xml)'
        inputs:
          # Sem workingDirectory — apontamos o POM em demo/pom.xml
          mavenPomFile: 'demo/pom.xml'
          goals: 'clean package'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'

      # 2) DEBUG: listar demo/target para verificar se o JAR foi gerado
      - script: |
          echo "=== Conteúdo de demo/target ==="
          ls -l demo/target || echo "(demo/target não encontrado)"
        displayName: 'DEBUG: Listar demo/target'

      # 3) Copiar o JAR gerado para ArtifactStagingDirectory
      - task: CopyFiles@2
        displayName: 'Copiar JAR para ArtifactStagingDirectory'
        inputs:
          contents: 'demo/target/*.jar'
          targetFolder: '$(Build.ArtifactStagingDirectory)'

      # 4) DEBUG: listar ArtifactStagingDirectory para verificar o JAR copiado
      - script: |
          echo "=== Conteúdo de $(Build.ArtifactStagingDirectory) ==="
          ls -l $(Build.ArtifactStagingDirectory) || echo "(ArtifactStagingDirectory vazio)"
        displayName: 'DEBUG: Listar $(Build.ArtifactStagingDirectory)'

      # 5) Publicar tudo que estiver em ArtifactStagingDirectory como artifact "drop"
      - task: PublishBuildArtifacts@1
        displayName: 'Publicar artefato drop'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: '$(artifactName)'
          publishLocation: 'Pipeline'

  - job: Deploy
    displayName: 'Download do artifact e deploy no App Service'
    dependsOn: Build
    steps:
      # 6) Baixar o artifact "drop" criado no Build
      - download: current

      # 7) DEBUG: listar $(Pipeline.Workspace) para ver onde está o JAR
      - script: |
          echo "=== Conteúdo de $(Pipeline.Workspace) após download ==="
          ls -R $(Pipeline.Workspace)
        displayName: 'DEBUG: Listar $(Pipeline.Workspace)'

      # 8) Deploy no App Service, apontando para o JAR em drop/
      - task: AzureWebApp@1
        displayName: 'Deploy do JAR no Azure Web App'
        inputs:
          azureSubscription: '$(azureSubscription)'
          appName: '$(azureWebAppName)'
          resourceGroupName: '$(azureResourceGroup)'
          package: '$(Pipeline.Workspace)/drop/*.jar'
          appSettings: |
            -WEBSITE_RUN_FROM_PACKAGE 1
          configurationStrings: |
            Demosqldb:$(CONNECTION_STRING)
